{"version":3,"sources":["com/vadelabs/turbo/styles/utils.cljc"],"mappings":";AAIA;;;;AAAA,AAAMA,AAGHC;AAHH,AAIE,AAAAC,AAA2B,AAAA,AAACQ,AAAaT;AAAzCE,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAAA,AAAA,AAAAI,AAAAJ;AAAAE,AAAOG;AAAPL,AAAoBM;AAApB,AACE,AAAQ,AAAA,AAAA,AAACE,AAAEH,AACAA;AACTP;;AACA,AAAI,AAACW,AAAIC,AAAkBJ,AACvB,AAACK,AAAKN,AACNO;;;AAEV;;;;AAAA,AAAMC,AAGHf;AAHH,AAIE,AAAI,AAAAgB,AAAUhB;AACZ,AAACD,AAAmB,AAACkB,AAAKjB;;AAC1BA;;;AAEJ;;;AAAA,AAAMkB,AAEHC;AAFH,AAGE,AAACC,AACC,AAAKC,AAAIC,AAAItB;AAAb,AACE,AAACuB,AACCF,AACA,AAACN,AAAoBO,AACrB,AAAI,AAACE,AAAKxB,AACR,AAACkB,AAAAA,AAAAA,AAAelB,AAAAA,AAChBA;AAPR,AASEmB","names":["com.vadelabs.turbo.styles.utils/string->camel-case","value","vec__42453","seq__42454","cljs.core/seq","first__42455","cljs.core/first","cljs.core/next","first-word","words","clojure.string.split","cljs.core._EQ_","cljs.core.map","clojure.string/capitalize","cljs.core.conj","clojure.string.join","com.vadelabs.turbo.styles.utils/keyword->camel-case","cljs.core/Keyword","cljs.core/name","com.vadelabs.turbo.styles.utils/map->camel-map","props","cljs.core/reduce-kv","acc","key","cljs.core.assoc","cljs.core/map?"],"sourcesContent":["(ns com.vadelabs.turbo.styles.utils\n  (:require\n   [clojure.string :as string]))\n\n(defn string->camel-case\n  \"Returns camel case version of the string, e.g. \\\"font-size\\\"\n  becomes \\\"fontSize\\\".\"\n  [value]\n  (let [[first-word & words] (string/split value #\"-\")]\n    (if (or (= first-word \"data\"\n               first-word \"area\"))\n      value\n      (-> (map string/capitalize words)\n          (conj first-word)\n          string/join))))\n\n(defn keyword->camel-case\n  \"Returns camel case version of the keyword, e.g., :font-size\n   becomes \\\"fontSize\\\".\"\n  [value]\n  (if (keyword? value)\n    (string->camel-case (name value))\n    value))\n\n(defn map->camel-map\n  \"Convert keys of map to camel case version.\"\n  [props]\n  (reduce-kv\n    (fn [acc key value]\n      (assoc\n        acc\n        (keyword->camel-case key)\n        (if (map? value)\n          (map->camel-map value)\n          value)))\n    {}\n    props))\n"]}