{"version":3,"sources":["com/vadelabs/turbo/hooks.cljc"],"mappings":"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","names":["com.vadelabs.turbo.hooks/raw-use-effect","js/module$node_modules$react$index.useEffect","com.vadelabs.turbo.hooks/raw-use-layout-effect","js/module$node_modules$react$index.useLayoutEffect","com.vadelabs.turbo.hooks/raw-use-memo","js/module$node_modules$react$index.useMemo","com.vadelabs.turbo.hooks/raw-use-callback","js/module$node_modules$react$index.useCallback","com.vadelabs.turbo.hooks/raw-use-imperative-handl","js/module$node_modules$react$index.useImperativeHandle","com.vadelabs.turbo.hooks/use-state","initial","vec__40856","cljs.core.nth","v","u","js/module$node_modules$react$index.useState","updater","x","f","xs","com$vadelabs$turbo$hooks$use_state_$_updater","cljs.core.apply","com.vadelabs.turbo.hooks/use-ref","ref","js/module$node_modules$react$index.useRef","x40859","cljs.core/PROTOCOL_SENTINEL","this","goog.object/set","G__40860","a","G__40861","G__40862","b","G__40863","G__40864","G__40865","var_args","G__40867","com.vadelabs.turbo.hooks/use-reducer","js/Error","reducer","init-state","com.vadelabs.turbo.hooks.use_reducer","js/undefined","init","js/module$node_modules$react$index.useReducer","cljs.core/fn?","cljs.core/ifn?","state","action","com.vadelabs.turbo.hooks/use-context","js/module$node_modules$react$index.useContext","com.vadelabs.turbo.hooks/wrap-fx","com.vadelabs.turbo.hooks/simple-body?","body","cljs.core._EQ_","cljs.core/count","cljs.core/Symbol","cljs.core/first","com.vadelabs.turbo.hooks/determine-deps","deps","G__40868","cljs.core/Keyword","cljs.core/to-array","G__40870","com.vadelabs.turbo.hooks/use-effect*","js/goog.DEBUG","G__40872","com.vadelabs.turbo.hooks/use-layout-effect*","G__40874","com.vadelabs.turbo.hooks/use-memo*","G__40876","com.vadelabs.turbo.hooks/use-callback*","G__40878","com.vadelabs.turbo.hooks/use-imperative-handle*","com.vadelabs.turbo.hooks/use-debug-value","js/module$node_modules$react$index.debugValue"],"sourcesContent":["(ns com.vadelabs.turbo.hooks\n  #?(:clj (:require [com.vadelabs.turbo.analyzer :as turbo.analyzer])\n     :cljs (:require [\"react\" :as react]\n                     [goog.object :as gobj]))\n  #?(:cljs (:require-macros [com.vadelabs.turbo.hooks])))\n\n#?(:cljs\n   (do (def raw-use-effect react/useEffect)\n       (def raw-use-layout-effect react/useLayoutEffect)\n       (def raw-use-memo react/useMemo)\n       (def raw-use-callback react/useCallback)\n       (def raw-use-imperative-handl react/useImperativeHandle)))\n\n\n#?(:cljs\n   (defn use-state\n     \"Like `react/useState`, but the update function returned can be used similar to `swap!`.\"\n     [initial]\n     (let [[v u]   (react/useState initial)\n           updater (react/useCallback (fn updater\n                                        ([x] (u x))\n                                        ([f & xs]\n                                         (updater (fn spread-updater\n                                                    [x]\n                                                    (apply f x xs)))))\n                                      #js [])]\n       [v updater])))\n\n#?(:cljs\n   (defn use-ref\n     \"List react/useRef. Supports accessing the \\\"current\\\" property via\n     dereference (@) and updating the \\\"current\\\" property via `reset!` and\n     `swap!`\"\n     [x]\n     (let [ref (react/useRef nil)]\n       (when (nil? (.-current ^js ref))\n         (set! (.-current ^js ref)\n               (specify! #js {:current x}\n                 IDeref\n                 (-deref [this]\n                   (.-current ^js this))\n                 IReset\n                 (-reset! [this v]\n                   (gobj/set this \"current\" v))\n                 ISwap\n                 (-swap!\n                   ([this f]\n                    (gobj/set this \"current\" (f (.-current ^js this))))\n                   ([this f a]\n                    (gobj/set this \"current\" (f (.-current ^js this) a)))\n                   ([this f a b]\n                    (gobj/set this \"current\" (f (.-current ^js this) a b)))\n                   ([this f a b xs]\n                    (gobj/set this \"current\" (apply f (.-current ^js this) a b xs)))))))\n       (.-current ^js ref))))\n\n#?(:cljs\n   (defn use-reducer\n     \"just react/useReducer.\"\n     ([reducer init-state]\n      (use-reducer reducer init-state js/undefined))\n     ([reducer init-state init]\n      (react/useReducer\n        (react/useMemo\n          #(if (and (not (fn? reducer)) (ifn? reducer))\n             (fn wrap-ifn [state action]\n               (reducer state action))\n             reducer)\n          #js [reducer])\n        init-state\n        init))))\n\n#?(:cljs\n   (def use-context\n     \"Just react/useContext\"\n     react/useContext))\n\n\n;; React `useEffect` expects either a function or undefined to be returned\n#?(:cljs\n   (defn wrap-fx [f]\n     (fn wrap-fx-return []\n       (let [x (f)]\n         (if (fn? x)\n           x\n           js/undefined)))))\n\n\n(defn simple-body? [body]\n  (and (= (count body) 1) (symbol? (first body))))\n\n\n#?(:clj\n   (defn deps-macro-body [env deps body deps->hook-body]\n     (cond\n       ;;\n       ;; Warn on typical errors writing body\n       ;;\n\n       ;; a single symbol\n       (and (= (count body) 1) (symbol? (first body)))\n       (do (turbo.analyzer/warn turbo.analyzer/warning-simple-body env {:form body})\n           nil)\n\n\n       ;;\n       ;; Different variations of deps\n       ;;\n\n       ;; deps are passed in as a vector\n       (vector? deps) (deps->hook-body `(cljs.core/array ~@deps)\n                                       body)\n\n       ;; auto deps is passed in\n       (= deps :auto-deps) (deps->hook-body\n                             `(cljs.core/array ~@(turbo.analyzer/resolve-local-vars env body))\n                             body)\n\n       ;; always fire it (don't pass any deps in to hook)\n       (= deps :always) (deps->hook-body body)\n\n       ;; pass an empty array for things that should only run once\n       (= deps :once) (deps->hook-body '(cljs.core/array) body)\n\n       :else (deps->hook-body `(determine-deps ~deps) body)))\n\n   :cljs (defn determine-deps [deps]\n           (case deps\n             :once      (array)\n             :always    js/undefined\n             :auto-deps (throw (js/Error. \"Cannot use :auto-deps outside of macro.\"))\n             (to-array deps))))\n\n\n#?(:clj\n   (defmacro use-effect\n     \"Like react/useEffect.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function and passed to\n     react/useEffect.  If it returns a function, that will be used to clean up.\n     \n     Unlike react/useEffect, only if you return a function will it be used, you\n     DO NOT need to return js/undefined.\"\n     [deps & body]\n     (deps-macro-body\n       &env deps body\n       (fn\n         ([fn-body] `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body))))\n         ([deps fn-body]\n          `^clj-nil (raw-use-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   ;; we provide a CLJS defn in the case when we need to pass around the hook\n   ;; as a value. This will be slower, `:auto-deps` won't work and devtools will\n   ;; be harder to read\n   (defn use-effect*\n     \"Like react/useEffect.  See `use-effect` for details on what `f`'s return values.  See namespace doc for `deps`.\"\n     ([f] (react/useEffect (wrap-fx f)))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-effect*`; use `use-effect` macro for that\"))))\n      (react/useEffect (wrap-fx f) (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-layout-effect\n     \"Like `use-effect` but instead calls react/useLayoutEffect.\"\n     [deps & body]\n     (deps-macro-body\n       &env deps body\n       (fn\n         ([fn-body] `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body))))\n         ([deps fn-body]\n          `^clj-nil (raw-use-layout-effect (wrap-fx (fn [] ~@fn-body)) ~deps))))))\n\n\n#?(:cljs\n   (defn use-layout-effect*\n     \"Like `use-effect*` but instead calls react/useLayoutEffect.\"\n     ([f] (react/useLayoutEffect (wrap-fx f)))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-layout-effect*`; use `use-layout-effect` macro for that\"))))\n      (react/useLayoutEffect (wrap-fx f) (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-memo\n     \"Like react/useMemo.  See namespace doc for `deps`.  `body` should be a\n     code form which will be wrapped in a function.\"\n     [deps & body]\n     (deps-macro-body\n       &env deps body\n       (fn\n         ([fn-body]\n          (vary-meta\n            `(raw-use-memo (fn [] ~@fn-body))\n            merge\n            {:tag (turbo.analyzer/inferred-type &env fn-body)}))\n         ([deps fn-body]\n          (vary-meta\n            `(raw-use-memo (fn [] ~@fn-body)\n                           ~deps)\n            merge\n            {:tag (turbo.analyzer/inferred-type &env (last fn-body))}))))))\n\n\n#?(:cljs\n   (defn use-memo*\n     \"Like react/useMemo.  `f` is unchanged in meaning.  See namespace doc for\n     `deps`.\"\n     ([f] (react/useMemo f))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-memo*`; use `use-memo` macro for that\"))))\n      (react/useMemo f (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-callback\n     \"Like react/useCallback.  See namespace doc for `deps`.  `fn-body` should\n     be a code form which returns a function.\"\n     [deps & fn-body]\n     (deps-macro-body\n       &env deps fn-body\n       (fn\n         ([fn-body] `^function (raw-use-callback ~@fn-body))\n         ([deps fn-body] `^function (raw-use-callback ~@fn-body\n                                                      ~deps))))))\n\n#?(:cljs\n   (defn use-callback*\n     \"`f` is a function which will be passed to react/useCallback.  See\n     namespace doc for `deps`.\"\n     ([f] (react/useCallback f))\n     ([f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-callback*`; use `use-callback` macro for that\"))))\n      (react/useCallback f (to-array deps)))))\n\n\n#?(:clj\n   (defmacro use-imperative-handle\n     \"Like react/useImperativeHandle.  `ref` is unchanged in meaning.  See\n     namespace doc for `deps`.  `body` should be a code form which will be\n     wrapped in a function.\"\n     [ref deps & body]\n     (deps-macro-body\n       &env deps body\n       (fn\n         ([fn-body] `(raw-use-imperative-handle ref (fn [] ~@fn-body)))\n         ([deps fn-body] `(raw-use-imperative-handle\n                            (fn [] ~@fn-body)\n                            ~deps))))))\n\n\n#?(:cljs\n   (defn use-imperative-handle*\n     \"Like react/useImperativeHandle.  `ref` and `f` are unchanged in meaning.\n     See namespace doc for `deps`\"\n     ([ref f] (react/useImperativeHandle ref f))\n     ([ref f deps]\n      (when js/goog.DEBUG\n        (when (= deps :auto-deps)\n          (throw (js/Error. \"Can't use `:auto-deps` with `use-imperative-handle*`; use `use-imperative-handle` macro for that\"))))\n      (react/useImperativeHandle ref f (to-array deps)))))\n\n\n#?(:cljs\n   (def use-debug-value\n     \"Just react/useDebugValue\"\n     react/debugValue))\n"]}